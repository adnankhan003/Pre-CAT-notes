

 ***** 2-D Array Twisters *****

 1)
	#include<stdio.h>
	int main()
	{
		int a[ ] [ ]={{1,   1,   1}, {2,  2,  2}, {3,  3,  3}};
		printf("%d", sizeof(a) );
                                   return 0;
	}
 
   Options:
	1)  3
	2)  ###Compile Error
	3)  6
	4)  9

  Answer: 2

*************************************************************************************************
2)
	#include<stdio.h>
	int main()
	{
		int a[ ] [ 2 ]={1, 2, 3, 4, 5, 6};
		printf("%d", a[ a[ 0 ] [ 0 ] ] [a[ 0 ] [ 0 ] ] );
				a[1][1] 
                                   return 0;
	}
		// 	       0  1 
		       [0]     1  2
		       [1]     3  4
                       [2]     5  6  

Options:
	###1)  4
	2)  compile error
	3)  1
	4)  2

  Answer: 1

**************************************************************************************************
3)
#include<stdio.h>
int main()
{
	int a[ ] [2]={1, 2, 3, 4, 5, 6};
	int *p = (int *)a;
	printf("%d", p[ 5 ] - p[ 1 ] );
		p[5]--> *(p+5) -->6 
		p[1]--> *(p+1) -->2
				  4
	return 0;
}
			 

  Options:
	1)  2
	2)  Compile Error
	###3)  4
	4)  5

  Answer: 3
***************************************************************************************************
4)
	#include<stdio.h>
	int main()
	{
		int a[] [2]={1, 9, 3, 4, 5, 6}; int *p = (int *)a;

		 int **pp = &p;
		 *++*pp--; ++pp;

		 printf("\n%u",*p - **pp);;
                 return 0;
	}
	
  Options:
	1)  4
	2)  Garbage value
	3)  8
	4)  0

  Answer: 2

***************************************************************************************************************
5)
	#include<stdio.h>
	int main()
	{
		char s[3] [128]={"SunBeam", "DAC", "WIMC"};
		char *p = s[1];
		s[0] = p;

		return 0; printf("%s",*p);
	}

Options:
	1)  DAC
	2)  compiler error
	3)  SunBeam
	4)  WIMC

  Answer: 2
*******************************************************************************************************************
6)
	#include<stdio.h>
	int main()
	{
		char s[3] [128]={"SunBeam", "DAC", "WIMC"};
		char *p = (char *) s[0];
		////char (*p)[128] = s; // p is the pointer to the block of 128 char	
		printf("%s",s[++p - s]);
		return 0; 
	}

 Options:
	1)  DAC
	2)  compiler error
	3)  SunBeam
	4)  WIMC

  Answer: 2

********************************************************************************************************************
7)
	#include<stdio.h>
	int main()
	{
		char s[3] [128]={"SunBeam", "DAC", "WIMC"};
		char *p = (char *) s[2];
		printf("%c%s", *p + *(p-1) - *p, ++p);
		//		   W		 IMC  		
		WIMC
		return 0; 
	}

		

  Options:
	1)  DAC
	2)  SDW
	3)  WIMC
	4)  SIMC
  
Answer: 3
**************************************************************************************************************************
8)
	#include<stdio.h>
	int main()
	{
		char s[3] [128]={"SunBeam", "DAC", "W I M C"};
		char *p = (char *) s[2];
		printf("%s", s [ strlen(p) - strlen(s) ] );
//				   7       -   7 => 0 
		return 0; 
	}
		s	
				0  1  2  3  4  5  6  7 ...... 127  	                               127 
				S  u  n  b  e  a  m  \0 
		[0]

		[1]

		[2] 			

	

 Options:
	1) DAC
	2)  W I M C
	3)  SIMC
	###4) SunBeam

  Answer: 4

*************************************************************************************************************************
9)
	#include<stdio.h>
	int main()
	{
		char s[3] [128]={"SunBeam", "DAC", "W I M C"};
		char *p = (char *) s[2] + 2;
		printf("%d", --*++p);
		return 0; 
	}

  Options:
	1)  72
	2)  86
	3)  76
	####4)  31

  Answer: 4

**********************************************************************************************************************
10)
	#include<stdio.h>
	int main()
	{
		char s[3] [9]={"SunBeam", "DAC", "W I M C"};

		printf("%d, %d, %d", sizeof(s), sizeof(s[0]), sizeof(s[2] [1] ) );

		return 0; 
	}
		       [0] [1] [2] [3] [4] [5] [6] [7] [8] 
		[0] 	S   u   n   B   e   a   m  \0

		[1]     D   A   C  

		[2]     W       I       M       C  \0 	


 Options:
	1)  27,  3,  1
	2)  27,  2,  2
	3)  27,  9,  1
	4)  27,  9,  2

  Answer: 3

*******************************************************************************************************************
			
				------********------

    
    

    	